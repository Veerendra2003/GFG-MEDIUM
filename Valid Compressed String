/*
Valid Compressed String
MediumAccuracy: 50.0%Submissions: 18K+Points: 4
Lamp
Don't Miss Out on the Chance to Work with Leading Companies! Visit the GFG Job Fair Now!  

A special compression mechanism can arbitrarily delete 0 or more characters and replace them with the deleted character count.
Given two strings, S and T where S is a normal string and T is a compressed string, determine if the compressed string  T is valid for the plaintext string S. 


Example 1:

Input:
S = "GEEKSFORGEEKS"
T = "G7G3S"
Output:
1
Explanation:
We can clearly see that T is a valid 
compressed string for S.

Example 2:

Input:
S = "DFS"
T = "D1D"
Output :
0
Explanation:
T is not a valid compressed string.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function checkCompressed() which takes 2 strings S and T as input parameters and returns integer 1 if T is a valid compression of S and 0 otherwise.


Expected Time Complexity: O(|T|)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ |S| ≤ 106
1 ≤ |T| ≤ 106
All characters are either capital or numeric.
*/
========================================================================================================================================================================
SOLUTION IN JAVA:
======================
//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S = read.readLine();
            String T = read.readLine();

            Solution ob = new Solution();
            System.out.println(ob.checkCompressed(S,T));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int checkCompressed(String S, String T) {
        // code here
        int i=0,j=0;
        while(i<S.length()&&j<T.length()){
           if(T.charAt(j)>='0' && T.charAt(j)<='9'){
               int count=0;
               while(j<T.length() && (T.charAt(j)>='0' && T.charAt(j)<='9')){
                   count = count*10+(T.charAt(j)-48);
                   j++;
               }
               i = i+count;
           }else if(T.charAt(j)!=S.charAt(i))
                 return 0;
            else {
                i++;
                j++;
            }
        }
        if(i==S.length() && j==T.length())
        return 1;
        return 0;
    }
}
